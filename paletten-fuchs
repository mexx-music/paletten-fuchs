import streamlit as st
import math
import streamlit.components.v1 as components

st.set_page_config(page_title="📦 Ladeplan – Version 2", layout="centered")
st.title("📦 Ladeplan Sattel – Mehrere Palettentypen")

# 🚛 Trailergröße
trailer_length = 1360  # cm
trailer_width = 245    # cm

# 🔢 Eingabe mehrerer Palettentypen
st.markdown("### ➕ Palettentypen eingeben")

palette_daten = []
typ_farben = ["#8ecae6", "#90be6d", "#f4a261", "#e76f51", "#b5838d"]

for idx in range(3):  # max. 3 Typen für diese Version
    with st.expander(f"🔹 Palettentyp {idx + 1}"):
        aktiv = st.checkbox(f"Aktivieren", value=(idx == 0))  # nur erste aktiv
        if aktiv:
            typ_name = st.text_input(f"Name Typ {idx + 1}", value=f"Typ {idx + 1}")
            pal_l = st.number_input(f"Länge (cm) – {typ_name}", min_value=50, max_value=200, value=120, key=f"l_{idx}")
            pal_b = st.number_input(f"Breite (cm) – {typ_name}", min_value=50, max_value=150, value=80, key=f"b_{idx}")
            anzahl = st.number_input(f"Anzahl – {typ_name}", min_value=1, max_value=40, value=10, key=f"a_{idx}")
            gewicht = st.number_input(f"Gewicht je Palette (kg) – {typ_name}", min_value=0, max_value=2000, value=150, key=f"g_{idx}")
            richtung = st.radio(f"Ausrichtung – {typ_name}", ["Längs (Längsseite nach vorne)", "Quer (Breitseite nach vorne)"], key=f"r_{idx}")
            if richtung == "Quer":
                pal_l, pal_b = pal_b, pal_l

            palette_daten.append({
                "name": typ_name,
                "l": pal_l,
                "b": pal_b,
                "anzahl": anzahl,
                "gewicht": gewicht,
                "farbe": typ_farben[idx % len(typ_farben)]
            })

# 🧠 Belegung berechnen
st.markdown("### 🗺️ Ladeplan (Draufsicht)")

grid_cols = trailer_length
grid_rows = trailer_width

cm_per_cell = 10  # Rasterauflösung (z. B. 10 cm pro Kästchen)
cells_x = trailer_length // cm_per_cell
cells_y = trailer_width // cm_per_cell
belegung = [[None for _ in range(cells_x)] for _ in range(cells_y)]

def finde_freien_platz(pal_l, pal_b):
    pal_x = pal_l // cm_per_cell
    pal_y = pal_b // cm_per_cell
    for y in range(cells_y - pal_y + 1):
        for x in range(cells_x - pal_x + 1):
            frei = True
            for dy in range(pal_y):
                for dx in range(pal_x):
                    if belegung[y + dy][x + dx] is not None:
                        frei = False
                        break
                if not frei:
                    break
            if frei:
                return x, y
    return None, None

log = []
gesamtgewicht = 0

for typ in palette_daten:
    geladen = 0
    for i in range(int(typ["anzahl"])):
        x0, y0 = finde_freien_platz(typ["l"], typ["b"])
        if x0 is None:
            log.append(f"❌ Kein Platz mehr für {typ['name']} Nr. {i+1}")
            break
        else:
            pal_x = typ["l"] // cm_per_cell
            pal_y = typ["b"] // cm_per_cell
            for dy in range(pal_y):
                for dx in range(pal_x):
                    belegung[y0 + dy][x0 + dx] = typ["farbe"]
            geladen += 1
            gesamtgewicht += typ["gewicht"]
    log.append(f"✅ {geladen}× {typ['name']} geladen.")

# 📊 Visualisierung
html = "<div style='display: grid; grid-template-columns: " + " ".join(["10px"] * cells_x) + "; gap:1px;'>"
for row in belegung:
    for zelle in row:
        farbe = zelle if zelle else "#ddd"
        html += f"<div style='background-color:{farbe}; width:10px; height:10px; border: 1px solid #aaa;'></div>"
html += "</div>"

components.html(html, height=500, scrolling=True)

# 📦 Zusammenfassung
st.markdown("### 📦 Zusammenfassung")
for eintrag in log:
    st.write(eintrag)
st.write(f"📏 Ladefläche: {trailer_length}×{trailer_width} cm")
st.write(f"⚖️ Gesamtgewicht: {gesamtgewicht:.1f} kg")
